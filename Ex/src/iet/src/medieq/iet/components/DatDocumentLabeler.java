// $Id: DatDocumentLabeler.java 1643 2008-09-12 21:56:20Z labsky $
package medieq.iet.components;

import java.util.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;

import uep.util.Options;

import medieq.iet.model.*;

public class DatDocumentLabeler implements DocumentLabeler {
    protected StringBuffer hdr;
    protected static final String ftr="\r\n## - End of File -";
    protected Document doc;
    protected AnnotationFilter filter;

    // TODO: move to cfg:
    // only the following line was used for name mapping for the English data:
    // public static final String medieqInstType="MEDIEQ_IE_Template:contact_data_table";
    
    // the following is used to map names for further languages:
    public static Map<String,String> attMap=new HashMap<String,String>(8);
    public static Map<String,ClassTrnRecord> classMap=new HashMap<String,ClassTrnRecord>(8);
    static {
        attMap.put("title", "degree-title");
        attMap.put("job", "job-title");
        
        ClassTrnRecord rec=new ClassTrnRecord("Contact","MEDIEQ_IE_Template:Person_Contact_Table");
        rec.attMap.put("name", "person");
        rec.attMap.put("job", "job title");
        rec.attMap.put("title", "degree title");
        rec.attMap.put("organization", "");
        rec.attMap.put("department", "");
        rec.attMap.put("name_author", "name_author");
        rec.attMap.put("name_responsible", "name_responsible");
        rec.extraAtts.add("relates_to_organization");
        classMap.put(rec.exName, rec);
    }
    
    public DatDocumentLabeler() {
        hdr=new StringBuffer(1024);
        String flt=Options.getOptionsInstance().getString("filter");
        filter=new AuthorAnnotationFilter(flt);
    }

    public int annotateDocument(Document doc) {
        int rc=0;
        this.doc=doc;
        if(doc.toString()==null) {
            System.err.println("Document "+doc.getFile()+" has no source");
            return -1;
        }
        int labCnt=0;
        StringBuffer buff=new StringBuffer(256);
        /* dump separate attributes */
        Iterator<AttributeValue> avit=doc.getAttributeValues().iterator();
        while(avit.hasNext()) { 
            labCnt+=dumpAttributes(avit.next(),labCnt,buff);
        }
        /* dump attribute belonging to instances */
        Iterator<Instance> init=doc.getInstances().iterator();
        while(init.hasNext()) {
            Instance in=init.next();
            avit=in.getAttributes().iterator();
            while(avit.hasNext()) {
                labCnt+=dumpAttributes(avit.next(),labCnt,buff);
            }
        }
        /* dump instances: groupings of the above attributes */
        int instCnt=0;
        init=doc.getInstances().iterator();
        while(init.hasNext()) {
            Instance in=init.next();
            if(filter.matches(in)) {
                instCnt++;
                int instId=labCnt+instCnt;
                dumpInstance(in,instId,buff);
            }
        }
        
        hdr.setLength(0);
        hdr.append("AnnotationMaxID::"+(labCnt+instCnt+1)+"\r\n");
        hdr.append("Attributes::1\r\n");
        hdr.append("{Document Handler} {GDM_STRING {Import HTML Metadata}}\r\n");
        hdr.append("\r\n");
        hdr.append("Annotations::"+(labCnt+instCnt)+"\r\n");
        if(labCnt>0) {
            hdr.append(buff);
        }
        hdr.append("\r\n");
        hdr.append("RawData::"+doc.getSource().length()+"\r\n");
        return rc;
    }

    public String getAnnotatedDocument() {
        return hdr.toString() + preprocess(doc.getSource()) + ftr.toString();
    }

    public void writeAnnotatedDocument(String fn, String encoding) throws IOException {
        if(fn.startsWith("file:///"))
            fn=fn.substring(8);
        else if(fn.startsWith("file:/"))
            fn=fn.substring(6);
        File labFile=new File(fn);
        OutputStream os=System.out;
        try {
            os=new FileOutputStream(labFile);
        }catch(IOException ex) {
            System.err.println("ERR Cannot write to "+labFile);
            throw(ex);
        }
        PrintStream ps=null;
        try {
            ps = new PrintStream(os, true, encoding);
        }catch(IOException ex) {
            System.err.println("ERR Cannot "+encoding+" encode");
            throw(ex);
        }
        ps.print("#Ellogon: Document File\r\n");
        ps.print("# This file was auto-generated by IET. Please edit only if you know what you are doing.\r\n");
        ps.print("Encoding::"+encoding+"\r\n");
        ps.print("FileFormat::5\r\n");
        ps.print("Translation::crlf\r\n");
        ps.print("ExternalID::"+labFile.getAbsolutePath()+"\r\n");
        ps.print("ID::"+labFile.getName()+"\r\n");
        ps.print(hdr.toString());
        ps.print(preprocess(doc.getSource()));
        ps.print(ftr.toString());
        ps.close();
    }
    
    public void clear() {
        doc=null;
        hdr.setLength(0);
    }
    
    protected int dumpAttributes(AttributeValue av, int baseCnt, StringBuffer buff) {
        int cnt=0;
        int filtered=0;
        if(av.getAnnotations()==null) {
            System.err.println("AttributeValue "+av.getText()+" has no Annotations assigned");
            return cnt;
        }
        Iterator<Annotation> anit=av.getAnnotations().iterator();
        while(anit.hasNext()) {
            cnt++;
            Annotation an=anit.next();
            int endPos=an.getStartOffset()+an.getLength();
            int annotId=baseCnt+cnt;
            String elgAttName=av.getAttributeDef().getName();
            if(attMap!=null) {
                String ss=attMap.get(elgAttName);
                if(ss!=null) {
                    if(ss.length()==0) // do not include this att in results
                        continue;
                    elgAttName=ss;
                }
            }
            if(filter.matches(av)) {
                buff.append(annotId+" ne {{"+an.getStartOffset()+" "+endPos+
                        "}} {{type {GDM_STRING "+escapeElgString(elgAttName)+"}}}\r\n");
            }else {
                filtered++;
            }
            an.setUserData(new Integer(annotId));
        }
        return cnt-filtered;
    }

    protected void dumpInstance(Instance in, int instId, StringBuffer buff) {
        ClassDef clsDef=in.getClassDef();
        ClassTrnRecord clsRec=(classMap!=null)? classMap.get(clsDef.getName()): null;
        String elgClass=(clsRec!=null)? clsRec.elgName: clsDef.getName();

        buff.append(instId+" "+elgClass+" {{0 0}} {");
        Iterator<AttributeClassLink> lit=clsDef.getAttributeLinks().iterator();
        // for each AttributeDef that can be part of ClassDef,
        // dump the corresponding AttributeValues (their Annotations)
        int i=0;
        while(lit.hasNext()) {
            AttributeClassLink link=lit.next();
            // dump AttributeDef name and data type
            AttributeDef attDef=link.getAttributeDef();
            String elgMember=attDef.getName();
            if(clsRec!=null) {
                String ss=clsRec.attMap.get(elgMember);
                if(ss!=null) {
                    if(ss.length()==0)
                        continue; // att is not to be included
                    elgMember=ss;
                }
            }
            String dataType="GDM_STRING";
            if(link.getMaxCard()>1) {
                dataType="GDM_STRING_SET";
            }
            if(i>0)
                buff.append(" ");
            buff.append("{"+escapeElgString(elgMember)+" {"+dataType+" {");
            // dump all values of this AttributeDef
            int j=0;
            Iterator<AttributeValue> avit=in.getAttributes(attDef).iterator();
            while(avit.hasNext()) {
                AttributeValue av=avit.next();
                Iterator<Annotation> anit=av.getAnnotations().iterator();
                while(anit.hasNext()) {
                    Annotation an=anit.next();
                    int annotId=((Integer) an.getUserData()).intValue();
                    if(j>0)
                        buff.append(" ");
                    buff.append(annotId);
                    j++;
                }
            }
            buff.append("}}}");
            i++;
        }
        // extra attributes that need to be added
        if(clsRec!=null) {
            Iterator<String> eit=clsRec.extraAtts.iterator();
            while(eit.hasNext()) {
                String elgMember=eit.next();
                if(i>0)
                    buff.append(" ");
                buff.append("{"+escapeElgString(elgMember)+" {GDM_STRING_SET {}}}");
            }
        }
        buff.append("}\r\n");
    }
    
    protected String preprocess(String docSrc) {
        return docSrc.replaceAll("\r\n", "\n").replaceAll("\n", "\r\n");
    }
    
    protected String escapeElgString(String s) {
        s=s.trim();
        if(s.indexOf(' ')!=-1)
            s='{'+s+'}';
        return s;
    }
}

// name mapping aid:
class ClassTrnRecord {
    String exName;
    String elgName;
    Map<String,String> attMap;
    List<String> extraAtts;
    ClassTrnRecord(String exName, String elgName) {
        this.exName=exName;
        this.elgName=elgName;
        attMap=new HashMap<String,String>(8);
        extraAtts=new ArrayList<String>(8);
    }
}
