// $Id: DataSourceWriter.java 1641 2008-09-12 21:53:08Z labsky $
package ex.train;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Iterator;

import uep.data.SampleFeature;
import uep.data.SampleSet;
import uep.util.Logger;

import ex.features.ClassificationF;
import ex.features.Feature;
import ex.features.PhraseLengthF;

/** Dumps the whole contents of a DataSource to file.
 */
public class DataSourceWriter {
    public final static byte FMT_ARFF=1;
    public final static byte FMT_XRFF=2;
    public final static byte FMT_AV=3;
    public final static byte FMT_LOG=4;
    public final static String[] fmtExts={"arff","xrff","smp"};
    public static String getFmtExt(byte fmt) {
        if(fmt<1 || fmt>fmtExts.length)
            throw new IllegalArgumentException("Invalid format "+fmt);
        return fmtExts[fmt-1];
    }
    public static byte ext2fmt(String ext) {
        String e=ext.toLowerCase();
        for(byte i=0;i<fmtExts.length;i++) {
            if(e.equals(fmtExts[i]))
                return (byte) (i+1);
        }
        return -1;
    }
    
    DataSource dataSource;
    //boolean[] filterMask;
    byte filter;
    static Logger log;
    
    public DataSourceWriter(DataSource dataSource, byte filter) {
        if(log==null)
            log=Logger.getLogger("dsw");
        this.dataSource=dataSource;
        this.filter=filter;
        //filterMask=null;
        //this.filter=SemAnnot.TYPE_ALL;
    }
    
    public void dump(String fileName, byte format) throws IOException {
        if(format==FMT_XRFF) {
            SampleSet sset=SampleSetFactory.initEmptyDataSet(dataSource, dataSource.getName(), true, filter);
            SampleSetFactory.addToSampleSet(dataSource, sset, filter);
            sset.writeXrff(fileName, true);
            return;
        }
        OutputStreamWriter out=new OutputStreamWriter(new FileOutputStream(fileName), "utf-8");
        // write header section
        if(format==FMT_ARFF) {
            out.write("@RELATION "+fileName+"\n");
            out.write("% Generated by Ex: file="+fileName+", filter="+filter+"\n\n");
            Iterator<Feature> fit=dataSource.getFeatureIterator(filter);
            while(fit.hasNext()) {
                Feature f=fit.next();
                out.write("@ATTRIBUTE "+f.name+" ");
                if(f instanceof ClassificationF) {
                    out.write("{");
                    Iterator<String> valit=((ClassificationF)f).getValues().iterator();
                    int i=0;
                    while(valit.hasNext()) {
                        if(i++>0)
                            out.write(",");
                        out.write(valit.next());
                    }
                    out.write("}");
                }else if(f instanceof PhraseLengthF) {
                    out.write("REAL");
                }else if(f.valueCnt==2) {
                    out.write("{0,1}");
                }else {
                    log.LG(Logger.ERR, "Cannot serialize n-ary feature "+f);
                }
                out.write("\n");
            }
            out.write("\n");
        }
        // write data
        if(format==FMT_ARFF)
            out.write("@DATA\n");
        Iterator<DataSample> it=dataSource.getDataIterator(filter);
        while(it.hasNext()) {
            DataSample sam=it.next();
            out.write(sam.toString(filter, format));
            out.write("\n");
        }
        out.close();
    }
    
    /** Converts this data source to an empty sample set containing the same features. 
     * Some features can be filtered out using filter. The DataSourceWriter instance remembers
     * the filter value for all subsequent addToSampleSet() calls until the next createSampleSet() call. */
/*
    public SampleSet createSampleSet() {
        SampleSet sset=new SampleSet(dataSource.getName(), true);
        sset.setWeighted(true);
        // features
        sset.setClassIdx(0);
        DataSource.FeatureIterator it=dataSource.getFeatureIterator(filter);
        // filterMask=null;
        int j=0; //, exp=0;
        while(it.hasNext()) {
            Feature f=it.next();
//            Logger.LOGERR("F"+j+"(exp="+exp+")="+f.name);
//            while(exp<it.getIdx()) {
//                if(filterMask==null) {
//                    filterMask=new boolean[dataSource.getFeatureCount()];
//                    java.util.Arrays.fill(filterMask, false);
//                }
//                Logger.LOGERR("Filt["+exp+"]=1");
//                filterMask[exp++]=true;
//            }
            if((f instanceof ClassificationF)) {
                sset.setClassIdx(j);
            }
            // enum features
            String[] vals=null;
            if(f.valueCnt>1 && f.valueCnt<Short.MAX_VALUE && !(f instanceof PhraseLengthF)) {
                vals=new String[f.valueCnt];
                for(int i=0;i<f.getValues().size();i++) {
                    vals[i]=f.getValues().get(i);
                }
            }
            byte dtype=(vals!=null)? SampleFeature.DT_ENUM: SampleFeature.DT_INT;
            SampleFeature sf=new SampleFeature(f.name, dtype, vals); // f.toString()
            sset.addFeature(sf);
            j++;
//            exp++;
        }
        return sset;
    }
*/
    
    /** Appends all samples from this data source to the given SampleSet, respecting a previously set filter. */
/*
    public void addToSampleSet(SampleSet sset) {
        log.LG(Logger.ERR, "Adding all samples from datasource "+this+" to "+sset);
        
        // data
        Iterator<DataSample> it=dataSource.getDataIterator(filter);
        int cnt=0;
        while(it.hasNext()) {
            if((cnt++) % 1000 == 0)
                System.err.print("\r"+cnt);
            DataSample sam=it.next();
            uep.data.Sample smp = new uep.data.SampleImpl();
            smp.setWeight(sam.getWeight());
            int[] feats=sam.getFeatures();
            int i=0;
            for(int j=0;j<feats.length;j++) {
                //if(filterMask!=null && filterMask[j])
                //    continue;
                int fval=feats[j];
                if(fval!=0 || i==0) { // 1st is the class, dump it even if it is 0 (bg)
                    String val;
                    SampleFeature f=sset.getFeature(i);
                    switch(f.getType()) {
                    case SampleFeature.DT_INT: 
                    case SampleFeature.DT_FLOAT:
                        val=String.valueOf(fval);
                        break;
                    case SampleFeature.DT_STRING:
                    case SampleFeature.DT_ENUM:
                        val=f.getValues()[fval];
                        break;
                    default:
                        throw new IllegalArgumentException("Unknown feature data type:"+f);
                    }
                    smp.setFeatureValue(i, val); // BEWARE: we index features from 0 everywhere, weka from 1
                }
                i++;
            }
            if(log.IFLG(Logger.INF)) {
                smp.addDebugInfo(sam.getDebugInfo().toString());
            }
            if(i!=sset.getFeatures().size()) {
                log.LGERR("Data source writer iterates over "+i+" feature values, target sample set has "+sset.getFeatures().size());
            }
            sset.addSample(smp);
        }
        log.LG(Logger.USR, "\nAdded "+cnt+" samples from data source to sample set ("+sset.getFeatures().size()+" features, "+sset.size()+" samples cum., "+sset.getFeature(sset.getClassIdx()).getValues().length+" classes)");
    }
*/
}
